AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Enhanced Domain Infrastructure - Phase 2: CloudFront & SSL'

Parameters:
  DomainName:
    Type: String
    Default: 'dcisionai.com'
    Description: 'Primary domain name'
  
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging']
    Description: 'Environment name'

Resources:
  # SSL Certificate for all subdomains
  WildcardCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZone
        - DomainName: !Sub '*.${DomainName}'
          HostedZoneId: !Ref HostedZone

  # CloudFront Distribution for MCP Documentation
  MCPDocsCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'MCP Documentation for ${DomainName}'
        Origins:
          - Id: MCPDocsS3Origin
            DomainName: !GetAtt MCPDocsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${MCPDocsOAI}'
        DefaultCacheBehavior:
          TargetOriginId: MCPDocsS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        Aliases:
          - !Sub 'mcp.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref WildcardCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # CloudFront Distribution for SDK Downloads
  SDKCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'SDK Downloads for ${DomainName}'
        Origins:
          - Id: SDKS3Origin
            DomainName: !GetAtt SDKBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${SDKOAI}'
        DefaultCacheBehavior:
          TargetOriginId: SDKS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        Aliases:
          - !Sub 'sdk.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref WildcardCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # CloudFront Distribution for API Documentation
  APIDocsCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'API Documentation for ${DomainName}'
        Origins:
          - Id: APIDocsS3Origin
            DomainName: !GetAtt APIDocsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${APIDocsOAI}'
        DefaultCacheBehavior:
          TargetOriginId: APIDocsS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        Aliases:
          - !Sub 'docs.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref WildcardCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # CloudFront Distribution for Status Page
  StatusPageCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'Status Page for ${DomainName}'
        Origins:
          - Id: StatusPageS3Origin
            DomainName: !GetAtt StatusPageBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${StatusPageOAI}'
        DefaultCacheBehavior:
          TargetOriginId: StatusPageS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        Aliases:
          - !Sub 'status.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref WildcardCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # Origin Access Identities for S3
  MCPDocsOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for MCP Docs S3 bucket - ${Environment}'

  SDKOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for SDK S3 bucket - ${Environment}'

  APIDocsOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for API Docs S3 bucket - ${Environment}'

  StatusPageOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for Status Page S3 bucket - ${Environment}'

  # S3 Bucket Policies with CloudFront OAI
  MCPDocsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MCPDocsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${MCPDocsOAI}'
            Action: s3:GetObject
            Resource: !Sub '${MCPDocsBucket}/*'

  SDKBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SDKBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${SDKOAI}'
            Action: s3:GetObject
            Resource: !Sub '${SDKBucket}/*'

  APIDocsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref APIDocsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${APIDocsOAI}'
            Action: s3:GetObject
            Resource: !Sub '${APIDocsBucket}/*'

  StatusPageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StatusPageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${StatusPageOAI}'
            Action: s3:GetObject
            Resource: !Sub '${StatusPageBucket}/*'

  # S3 Buckets (referencing existing ones)
  MCPDocsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'mcp-docs-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  SDKBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sdk-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  APIDocsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'api-docs-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  StatusPageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'status-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Route 53 Hosted Zone (referencing existing)
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName

  # DNS Records for CloudFront distributions
  MCPSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'mcp.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt MCPDocsCloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  SDKSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'sdk.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt SDKCloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  DocsSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'docs.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIDocsCloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  StatusSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'status.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt StatusPageCloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
        EvaluateTargetHealth: false

Outputs:
  WildcardCertificateArn:
    Description: 'ARN of the wildcard SSL certificate'
    Value: !Ref WildcardCertificate
    Export:
      Name: !Sub '${AWS::StackName}-WildcardCertificateArn'

  MCPDocsCloudFrontDomain:
    Description: 'CloudFront domain for MCP Documentation'
    Value: !GetAtt MCPDocsCloudFront.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-MCPDocsCloudFrontDomain'

  SDKCloudFrontDomain:
    Description: 'CloudFront domain for SDK Downloads'
    Value: !GetAtt SDKCloudFront.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-SDKCloudFrontDomain'

  APIDocsCloudFrontDomain:
    Description: 'CloudFront domain for API Documentation'
    Value: !GetAtt APIDocsCloudFront.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-APIDocsCloudFrontDomain'

  StatusPageCloudFrontDomain:
    Description: 'CloudFront domain for Status Page'
    Value: !GetAtt StatusPageCloudFront.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-StatusPageCloudFrontDomain'

  NextSteps:
    Description: 'Next steps after Phase 2 deployment'
    Value: |
      Phase 2 Complete! CloudFront distributions and SSL certificates deployed.
      
      Next steps:
      1. ✅ CloudFront distributions active with SSL
      2. ✅ S3 buckets configured with proper policies
      3. ✅ DNS records pointing to CloudFront
      4. 🔄 Phase 3: Deploy actual services
         - Deploy MCP server to mcp.dcisionai.com
         - Deploy commercial API to api.dcisionai.com
         - Deploy customer portal to portal.dcisionai.com
         - Deploy documentation to docs.dcisionai.com
      5. 🔄 Test all subdomains and SSL certificates
      6. 🔄 Monitor performance and security
