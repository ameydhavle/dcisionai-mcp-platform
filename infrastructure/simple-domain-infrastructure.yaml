AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Platform - Simple Domain Infrastructure (Phase 1)'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name (production, staging, development)
    AllowedValues: [production, staging, development]
  
  DomainName:
    Type: String
    Default: dcisionai.com
    Description: Primary domain name

Resources:
  # ============================================================================
  # ROUTE 53 HOSTED ZONE
  # ============================================================================
  
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'DNS Management for DcisionAI Platform'

  # ============================================================================
  # S3 BUCKETS FOR STATIC CONTENT
  # ============================================================================
  
  # MCP Documentation Bucket
  MCPDocsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'mcp-docs-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'MCP Documentation Storage'

  # SDK Bucket
  SDKBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sdk-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'SDK Downloads Storage'

  # API Documentation Bucket
  APIDocsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'api-docs-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'API Documentation Storage'

  # Status Page Bucket
  StatusPageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'status-${DomainName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Status Page Storage'

  # ============================================================================
  # BASIC DNS RECORDS
  # ============================================================================
  
  # Root domain A record (preserve existing Vercel hosting)
  RootDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      TTL: '300'
      ResourceRecords:
        - '76.76.21.21' # Current Vercel hosting IP - preserve existing website

  # www subdomain CNAME record (preserve existing Vercel hosting)
  WWWSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'www.${DomainName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - 'cname.vercel-dns.com' # Current Vercel hosting - preserve existing website

  # API subdomain CNAME record (points to existing API Gateway)
  APISubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'api.${DomainName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - '2dtpy57vn2.execute-api.us-east-1.amazonaws.com'

  # Portal subdomain CNAME record (placeholder)
  PortalSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'portal.${DomainName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !Ref DomainName # Placeholder - will be updated after portal deployment

  # Auth subdomain CNAME record (placeholder)
  AuthSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'auth.${DomainName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !Ref DomainName # Placeholder - will be updated after auth service deployment

  # Monitoring subdomain CNAME record (placeholder)
  MonitoringSubdomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub 'monitoring.${DomainName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !Ref DomainName # Placeholder - will be updated after monitoring deployment

Outputs:
  # ============================================================================
  # INFRASTRUCTURE OUTPUTS
  # ============================================================================
  
  HostedZoneId:
    Description: 'Route 53 Hosted Zone ID'
    Value: !Ref HostedZone
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'

  HostedZoneNameServers:
    Description: 'Route 53 Hosted Zone Name Servers'
    Value: !Join ['\n', !GetAtt HostedZone.NameServers]
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneNameServers'

  # ============================================================================
  # S3 BUCKET OUTPUTS
  # ============================================================================
  
  MCPDocsBucketName:
    Description: 'MCP Documentation S3 Bucket Name'
    Value: !Ref MCPDocsBucket
    Export:
      Name: !Sub '${AWS::StackName}-MCPDocsBucketName'

  SDKBucketName:
    Description: 'SDK Downloads S3 Bucket Name'
    Value: !Ref SDKBucket
    Export:
      Name: !Sub '${AWS::StackName}-SDKBucketName'

  APIDocsBucketName:
    Description: 'API Documentation S3 Bucket Name'
    Value: !Ref APIDocsBucket
    Export:
      Name: !Sub '${AWS::StackName}-APIDocsBucketName'

  StatusPageBucketName:
    Description: 'Status Page S3 Bucket Name'
    Value: !Ref StatusPageBucket
    Export:
      Name: !Sub '${AWS::StackName}-StatusPageBucketName'

  # ============================================================================
  # DNS CONFIGURATION INSTRUCTIONS
  # ============================================================================
  
  DNSConfigurationInstructions:
    Description: 'Instructions for configuring DNS in GoDaddy'
    Value: !Sub |
      üåê DNS Configuration Instructions for ${DomainName}
      
      After this stack is deployed, you need to update your GoDaddy DNS settings:
      
      1. Go to GoDaddy DNS Management for ${DomainName}
      2. Update the Name Servers to use AWS Route 53:
         ${!Join ['\n         ', !GetAtt HostedZone.NameServers]}
      
      3. Wait for DNS propagation (24-48 hours)
      
      4. Test your subdomains:
         - dcisionai.com ‚Üí Existing Vercel website (PRESERVED)
         - www.dcisionai.com ‚Üí Existing Vercel website (PRESERVED)
         - api.dcisionai.com ‚Üí Commercial API (WORKING)
         - portal.dcisionai.com ‚Üí Customer Portal (placeholder)
         - auth.dcisionai.com ‚Üí Authentication Service (placeholder)
         - monitoring.dcisionai.com ‚Üí System Monitoring (placeholder)
      
      5. Next steps:
         - Deploy CloudFront distributions for static content
         - Set up SSL certificates
         - Deploy services to each subdomain
      
      üéØ This setup implements Phase 1 of your Dual-Track Architecture:
         - Basic DNS infrastructure ready
         - S3 buckets for static content
         - Foundation for enhanced features
    Export:
      Name: !Sub '${AWS::StackName}-DNSConfigurationInstructions'

  # ============================================================================
  # NEXT STEPS
  # ============================================================================
  
  NextSteps:
    Description: 'Next steps after basic domain infrastructure deployment'
    Value: !Sub |
      üöÄ Next Steps for Phase 3B:
      
      1. ‚úÖ Basic Domain Infrastructure Deployed (COMPLETE)
      2. üîÑ Update GoDaddy DNS with AWS Name Servers
      3. ‚è≥ Wait for DNS propagation (24-48 hours)
      4. üéØ Phase 2: Add CloudFront Distributions
         - Deploy CloudFront for static content delivery
         - Set up SSL certificates
         - Configure custom domains
      5. üéØ Phase 3: Deploy Services
         - Deploy MCP server to mcp.${DomainName}
         - Deploy commercial API to api.${DomainName}
         - Deploy customer portal to portal.${DomainName}
         - Deploy documentation to docs.${DomainName}
      
      6. üß™ Test all subdomains and SSL certificates
      7. üìä Monitor performance and security
      8. üöÄ Phase 3C: Production Hardening
    Export:
      Name: !Sub '${AWS::StackName}-NextSteps'
