name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dcisionai-mcp-server

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.mcp.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.mcp.txt
        
          - name: Run tests
        run: |
          python tests/test_actual_functionality.py
        
    - name: Test coverage
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      uses: python-security/bandit-action@v1
      with:
        path: src/
        level: low
        
    - name: Run Safety check
      run: |
        pip install safety
        safety check -r requirements.mcp.txt

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -f Dockerfile.mcp -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --load .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to staging
      run: |
        chmod +x scripts/deploy-mcp-server-simple.sh
        ./scripts/deploy-mcp-server-simple.sh staging
        
    - name: Health check staging
      run: |
        # Wait for deployment to complete
        sleep 60
        # Get the public IP from ECS
        CLUSTER_NAME="DcisionAI-MCP-Simple-staging"
        SERVICE_NAME="DcisionAI-MCP-Simple-Service-staging"
        
        TASK_ARN=$(aws ecs list-tasks \
          --cluster $CLUSTER_NAME \
          --service-name $SERVICE_NAME \
          --region ${{ env.AWS_REGION }} \
          --query 'taskArns[0]' \
          --output text)
          
        if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
          ENI_ID=$(aws ecs describe-tasks \
            --cluster $CLUSTER_NAME \
            --tasks $TASK_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
            
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --region ${{ env.AWS_REGION }} \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
            
          # Test health endpoint
          curl -f http://$PUBLIC_IP:8080/health || exit 1
          echo "‚úÖ Staging deployment successful at http://$PUBLIC_IP:8080"
        else
          echo "‚ùå No tasks found for staging service"
          exit 1
        fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to production
      run: |
        chmod +x scripts/deploy-mcp-server-simple.sh
        ./scripts/deploy-mcp-server-simple.sh production
        
    - name: Health check production
      run: |
        # Wait for deployment to complete
        sleep 60
        # Get the public IP from ECS
        CLUSTER_NAME="DcisionAI-MCP-Simple-production"
        SERVICE_NAME="DcisionAI-MCP-Simple-Service-production"
        
        TASK_ARN=$(aws ecs list-tasks \
          --cluster $CLUSTER_NAME \
          --service-name $SERVICE_NAME \
          --region ${{ env.AWS_REGION }} \
          --query 'taskArns[0]' \
          --output text)
          
        if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
          ENI_ID=$(aws ecs describe-tasks \
            --cluster $CLUSTER_NAME \
            --tasks $TASK_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
            
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --region ${{ env.AWS_REGION }} \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
            
          # Test health endpoint
          curl -f http://$PUBLIC_IP:8080/health || exit 1
          echo "‚úÖ Production deployment successful at http://$PUBLIC_IP:8080"
        else
          echo "‚ùå No tasks found for production service"
          exit 1
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-staging.result == 'success' && needs.deploy-production.result == 'success'
      run: |
        echo "üéâ All deployments successful!"
        echo "Staging: ${{ needs.deploy-staging.outputs.url }}"
        echo "Production: ${{ needs.deploy-production.outputs.url }}"
        
    - name: Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details."
