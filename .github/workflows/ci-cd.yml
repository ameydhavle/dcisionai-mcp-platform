name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dcisionai-mcp-server

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.mcp.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.mcp.txt
        
    - name: Run tests
      run: |
        python tests/workflow/test_complete_workflow.py
        
    - name: Test coverage
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        pip install safety
        safety check -r requirements.mcp.txt

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -f Dockerfile.mcp -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --load .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging (AgentCore)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.mcp.txt
        
    - name: Deploy to AgentCore staging
      run: |
        python scripts/deployment/dcisionai_manufacturing_deploy_agentcore.py
        
    - name: Health check AgentCore staging
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Get AgentCore runtime information
        AGENT_RUNTIME_NAME="DcisionAI_Manufacturing_MCP_v1_v2"
        
        # Check if agent runtime exists and is active
        AGENT_ARN=$(aws bedrock-agentcore-control list-agent-runtimes \
          --region ${{ env.AWS_REGION }} \
          --query "agentRuntimeSummaries[?agentRuntimeName=='$AGENT_RUNTIME_NAME'].agentRuntimeArn" \
          --output text)
          
        if [ -n "$AGENT_ARN" ] && [ "$AGENT_ARN" != "None" ]; then
          echo "‚úÖ AgentCore staging deployment successful!"
          echo "üìã Agent Runtime ARN: $AGENT_ARN"
          echo "üîó Agent Runtime Name: $AGENT_RUNTIME_NAME"
          
          # Test the agent runtime
          echo "üß™ Testing AgentCore runtime..."
          # Note: Actual invocation testing would require proper authentication
          # For now, we just verify the runtime exists and is active
          echo "‚úÖ AgentCore runtime is available for testing"
        else
          echo "‚ùå AgentCore runtime not found or not active"
          exit 1
        fi

  deploy-production:
    name: Deploy to Production (AgentCore)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.mcp.txt
        
    - name: Deploy to AgentCore production
      run: |
        python scripts/deployment/dcisionai_manufacturing_deploy_agentcore.py
        
    - name: Health check AgentCore production
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Get AgentCore runtime information
        AGENT_RUNTIME_NAME="DcisionAI_Manufacturing_MCP_v1_v2"
        
        # Check if agent runtime exists and is active
        AGENT_ARN=$(aws bedrock-agentcore-control list-agent-runtimes \
          --region ${{ env.AWS_REGION }} \
          --query "agentRuntimeSummaries[?agentRuntimeName=='$AGENT_RUNTIME_NAME'].agentRuntimeArn" \
          --output text)
          
        if [ -n "$AGENT_ARN" ] && [ "$AGENT_ARN" != "None" ]; then
          echo "‚úÖ AgentCore production deployment successful!"
          echo "üìã Agent Runtime ARN: $AGENT_ARN"
          echo "üîó Agent Runtime Name: $AGENT_RUNTIME_NAME"
          
          # Test the agent runtime
          echo "üß™ Testing AgentCore runtime..."
          # Note: Actual invocation testing would require proper authentication
          # For now, we just verify the runtime exists and is active
          echo "‚úÖ AgentCore runtime is available for testing"
        else
          echo "‚ùå AgentCore runtime not found or not active"
          exit 1
        fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-staging.result == 'success' && needs.deploy-production.result == 'success'
      run: |
        echo "üéâ All AgentCore deployments successful!"
        echo "Staging: DcisionAI_Manufacturing_MCP_v1_v2 (AgentCore)"
        echo "Production: DcisionAI_Manufacturing_MCP_v1_v2 (AgentCore)"
        echo "üîó AgentCore Runtime: Available for testing via AWS Bedrock"
        
    - name: Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs for more details."
