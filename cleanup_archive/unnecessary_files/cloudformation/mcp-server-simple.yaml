AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Simple MCP Server Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging/production)
    AllowedValues: [staging, production]
  
  ECRImageUri:
    Type: String
    Description: ECR image URI for the MCP server
    
  DeploymentTimestamp:
    Type: String
    Default: "2025-08-25T21:59:00Z"
    Description: Deployment timestamp to force updates

Resources:
  # ECS Cluster
  MCPCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "DcisionAI-MCP-Simple-${Environment}"
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # Task Definition
  MCPTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "DcisionAI-MCP-Simple-${Environment}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt MCPServerTaskRole.Arn
      ContainerDefinitions:
        - Name: mcp-server
          Image: !Ref ECRImageUri
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: LOG_LEVEL
              Value: INFO
            - Name: DEPLOYMENT_TIMESTAMP
              Value: !Ref DeploymentTimestamp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MCPLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: mcp-server

  # ECS Service (without load balancer)
  MCPService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "DcisionAI-MCP-Simple-Service-${Environment}"
      Cluster: !Ref MCPCluster
      TaskDefinition: !Ref MCPTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref MCPSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-MCP-Simple-VPC-${Environment}"

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-MCP-Simple-Public-Subnet-1-${Environment}"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-MCP-Simple-Public-Subnet-2-${Environment}"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-MCP-Simple-IGW-${Environment}"

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-MCP-Simple-Public-RT-${Environment}"

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Group for MCP Server
  MCPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MCP server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  MCPServerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  # CloudWatch Log Group
  MCPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/DcisionAI-MCP-Simple-${Environment}"
      RetentionInDays: 30

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref MCPCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  ServiceName:
    Description: ECS Service Name
    Value: !Ref MCPService
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref MCPTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinitionArn"

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
