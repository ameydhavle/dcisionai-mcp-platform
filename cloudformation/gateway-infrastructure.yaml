AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Gateway Infrastructure for Production-Ready MCP Architecture'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging/production)
    AllowedValues: [staging, production]
  
  DomainName:
    Type: String
    Default: api.dcisionai.com
    Description: Domain name for the gateway

Resources:
  # Cognito User Pool for Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "DcisionAI-Users-${Environment}"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: tenant_id
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: plan
          AttributeDataType: String
          Required: false
          Mutable: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "DcisionAI-Client-${Environment}"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - https://api.dcisionai.com/callback
      LogoutURLs:
        - https://api.dcisionai.com/logout

  # API Gateway
  DcisionAIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "DcisionAI-Gateway-${Environment}"
      Description: "Gateway for DcisionAI MCP Server with authentication and rate limiting"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Authorizer
  GatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub "DcisionAI-Authorizer-${Environment}"
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref DcisionAIGateway
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  # API Gateway Resources and Methods
  GatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DcisionAIGateway
      ParentId: !GetAtt DcisionAIGateway.RootResourceId
      PathPart: '{proxy+}'

  # MCP Endpoint Method
  MCPMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DcisionAIGateway
      ResourceId: !Ref GatewayResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref GatewayAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub "http://localhost:8000/{proxy}"
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
        PassthroughBehavior: WHEN_NO_MATCH

  # API Gateway Deployment
  GatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MCPMethod
    Properties:
      RestApiId: !Ref DcisionAIGateway
      StageName: !Ref Environment

  # CloudWatch Log Group for Gateway
  GatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/DcisionAI-Gateway-${Environment}"
      RetentionInDays: 30

  # DynamoDB Table for API Keys and Rate Limiting
  APIKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "dcisionai-api-keys-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: api_key
          AttributeType: S
        - AttributeName: tenant_id
          AttributeType: S
      KeySchema:
        - AttributeName: api_key
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TenantIndex
          KeySchema:
            - AttributeName: tenant_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # DynamoDB Table for Rate Limiting
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "dcisionai-rate-limits-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # DynamoDB Table for Tenant Management
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "dcisionai-tenants-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenant_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: tenant_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Function for Gateway Logic
  GatewayLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "dcisionai-gateway-${Environment}"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt GatewayLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import jwt
          from datetime import datetime, timedelta
          
          def handler(event, context):
              # Gateway logic will be implemented here
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Gateway working'})
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TENANTS_TABLE: !Ref TenantsTable
          API_KEYS_TABLE: !Ref APIKeysTable
          RATE_LIMIT_TABLE: !Ref RateLimitTable
          MCP_SERVER_URL: "http://localhost:8000"

  # IAM Role for Gateway Lambda
  GatewayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "DcisionAI-Gateway-Lambda-Role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt TenantsTable.Arn
                  - !GetAtt APIKeysTable.Arn
                  - !GetAtt RateLimitTable.Arn

  # CloudWatch Dashboard for Monitoring
  GatewayDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "DcisionAI-Gateway-${Environment}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", "ApiName", "${DcisionAIGateway}"],
                  [".", "4XXError", ".", "."],
                  [".", "5XXError", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${GatewayLambda}"],
                  [".", "Errors", ".", "."],
                  [".", "Throttles", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Gateway Lambda Metrics"
              }
            }
          ]
        }

  # SNS Topic for Alerts
  GatewayAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "DcisionAI-Gateway-Alerts-${Environment}"
      DisplayName: !Sub "DcisionAI Gateway Alerts ${Environment}"

  # CloudWatch Alarms
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "DcisionAI-Gateway-High-Error-Rate-${Environment}"
      AlarmDescription: "High error rate in API Gateway"
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref DcisionAIGateway
      AlarmActions:
        - !Ref GatewayAlertsTopic

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "DcisionAI-Gateway-High-Latency-${Environment}"
      AlarmDescription: "High latency in API Gateway"
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref DcisionAIGateway
      AlarmActions:
        - !Ref GatewayAlertsTopic

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  GatewayUrl:
    Description: API Gateway URL
    Value: !Sub "https://${DcisionAIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-GatewayUrl"

  TenantsTableName:
    Description: DynamoDB table for tenant management
    Value: !Ref TenantsTable
    Export:
      Name: !Sub "${AWS::StackName}-TenantsTable"

  APIKeysTableName:
    Description: DynamoDB table for API keys
    Value: !Ref APIKeysTable
    Export:
      Name: !Sub "${AWS::StackName}-APIKeysTable"
