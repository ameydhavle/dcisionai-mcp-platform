AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Gateway Service - ECS Fargate Deployment'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name (staging/production)
    AllowedValues: [staging, production]
  
  ECRImageUri:
    Type: String
    Description: ECR image URI for the gateway service
  
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID
  
  TenantsTable:
    Type: String
    Description: DynamoDB table name for tenant management
  
  APIKeysTable:
    Type: String
    Description: DynamoDB table name for API keys
  
  MCPServerUrl:
    Type: String
    Description: URL of the MCP server

Resources:
  # VPC for Gateway Service
  GatewayVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-Gateway-VPC-${Environment}"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-Gateway-IGW-${Environment}"

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref GatewayVPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GatewayVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-Gateway-Public-Subnet-1-${Environment}"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref GatewayVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-Gateway-Public-Subnet-2-${Environment}"

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref GatewayVPC
      Tags:
        - Key: Name
          Value: !Sub "DcisionAI-Gateway-Public-RT-${Environment}"

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnets with Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Group for Gateway Service
  GatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "DcisionAI-Gateway-SG-${Environment}"
      GroupDescription: Security group for DcisionAI Gateway service
      VpcId: !Ref GatewayVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  GatewayLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "DcisionAI-Gateway-ALB-${Environment}"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref GatewaySecurityGroup

  # Target Group for Gateway Service
  GatewayTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "DcisionAI-Gateway-TG-${Environment}"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref GatewayVPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Listener for HTTP
  GatewayListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GatewayTargetGroup
      LoadBalancerArn: !Ref GatewayLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Cluster
  GatewayCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "DcisionAI-Gateway-Cluster-${Environment}"
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # Task Definition for Gateway Service
  GatewayTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "DcisionAI-Gateway-Task-${Environment}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt GatewayTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt GatewayTaskRole.Arn
      ContainerDefinitions:
        - Name: gateway
          Image: !Ref ECRImageUri
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: USER_POOL_ID
              Value: !Ref UserPoolId
            - Name: USER_POOL_CLIENT_ID
              Value: !Ref UserPoolClientId
            - Name: TENANTS_TABLE
              Value: !Ref TenantsTable
            - Name: API_KEYS_TABLE
              Value: !Ref APIKeysTable
            - Name: MCP_SERVER_URL
              Value: !Ref MCPServerUrl
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref GatewayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: gateway
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # IAM Role for ECS Task Execution
  GatewayTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "DcisionAI-Gateway-Task-Execution-Role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt GatewayLogGroup.Arn

  # IAM Role for ECS Task
  GatewayTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "DcisionAI-Gateway-Task-Role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TenantsTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${APIKeysTable}"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:GetUser
                  - cognito-idp:AdminGetUser
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"

  # CloudWatch Log Group
  GatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/DcisionAI-Gateway-${Environment}"
      RetentionInDays: 30

  # ECS Service
  GatewayService:
    Type: AWS::ECS::Service
    DependsOn: GatewayListener
    Properties:
      ServiceName: !Sub "DcisionAI-Gateway-Service-${Environment}"
      Cluster: !Ref GatewayCluster
      TaskDefinition: !Ref GatewayTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref GatewaySecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: gateway
          ContainerPort: 8080
          TargetGroupArn: !Ref GatewayTargetGroup
      HealthCheckGracePeriodSeconds: 60

  # Auto Scaling Target
  GatewayAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${GatewayCluster.Name}/${GatewayService.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  GatewayAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "DcisionAI-Gateway-Scaling-Policy-${Environment}"
      PolicyType: TargetTrackingScaling
      ScalableTargetId: !Ref GatewayAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt GatewayLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"

  GatewayServiceURL:
    Description: URL for the Gateway service
    Value: !Sub "http://${GatewayLoadBalancer.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-GatewayServiceURL"

  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref GatewayCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  ServiceName:
    Description: Name of the ECS service
    Value: !Ref GatewayService
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"
