AWSTemplateFormatVersion: '2010-09-09'
Description: 'DcisionAI Manufacturing Playground - Bedrock-style interface for demos'

Parameters:
  DomainName:
    Type: String
    Default: 'dcisionai.com'
    Description: 'Domain name for the playground'
  
  Subdomain:
    Type: String
    Default: 'playground'
    Description: 'Subdomain for the playground'
  
  CertificateArn:
    Type: String
    Description: 'ARN of the SSL certificate for the domain'
  
  HostedZoneId:
    Type: String
    Description: 'Route53 hosted zone ID for the domain'

Resources:
  # S3 Bucket for static website
  PlaygroundBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-dcisionai-playground-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, POST, PUT, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy
  PlaygroundBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PlaygroundBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${PlaygroundBucket}/*'

  # CloudFront Origin Access Control
  PlaygroundOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  PlaygroundDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${Subdomain}.${DomainName}'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt PlaygroundBucket.RegionalDomainName
            OriginAccessControlId: !Ref PlaygroundOAC
          - Id: APIGatewayOrigin
            DomainName: !Sub '${PlaygroundAPI}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: APIGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
                - X-Amz-Date
                - X-Api-Key
                - X-Amz-Security-Token
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # API Gateway
  PlaygroundAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-API'
      Description: 'DcisionAI Manufacturing Playground API'
      EndpointConfiguration:
        Types: [REGIONAL]
      Cors:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowOrigins:
          - !Sub 'https://${Subdomain}.${DomainName}'
          - !Sub 'https://${PlaygroundDistribution.DomainName}'

  # API Gateway Resources
  PlaygroundAPIRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ParentId: !GetAtt PlaygroundAPI.RootResourceId
      PathPart: api

  PlaygroundAPIOptimize:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ParentId: !Ref PlaygroundAPIRoot
      PathPart: optimize

  PlaygroundAPIHealth:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ParentId: !Ref PlaygroundAPIRoot
      PathPart: health

  PlaygroundAPIStatus:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ParentId: !Ref PlaygroundAPIRoot
      PathPart: status

  # Lambda Function
  PlaygroundLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Lambda'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          # Placeholder - will be updated during deployment
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Role: !GetAtt PlaygroundLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          AGENT_RUNTIME_ARN: !Sub 'arn:aws:bedrock-agentcore:${AWS::Region}:${AWS::AccountId}:runtime/DcisionAI_Manufacturing_Agent_v1_1756943746-0OgdtC2Je6'

  # Lambda Execution Role
  PlaygroundLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAgentCoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agentcore:InvokeAgentRuntime
                  - bedrock-agentcore:GetAgentRuntime
                  - bedrock-agentcore:ListAgentRuntimes
                Resource: '*'

  # API Gateway Method - Optimize
  PlaygroundAPIOptimizeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ResourceId: !Ref PlaygroundAPIOptimize
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PlaygroundLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  # API Gateway Method - Health
  PlaygroundAPIHealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ResourceId: !Ref PlaygroundAPIHealth
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PlaygroundLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  # API Gateway Method - Status
  PlaygroundAPIStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PlaygroundAPI
      ResourceId: !Ref PlaygroundAPIStatus
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PlaygroundLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  # Lambda Permission for API Gateway
  PlaygroundLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PlaygroundLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PlaygroundAPI}/*/*'

  # API Gateway Deployment
  PlaygroundAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PlaygroundAPIOptimizeMethod
      - PlaygroundAPIHealthMethod
      - PlaygroundAPIStatusMethod
    Properties:
      RestApiId: !Ref PlaygroundAPI
      StageName: prod

  # Route53 Record
  PlaygroundDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${Subdomain}.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt PlaygroundDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

Outputs:
  PlaygroundURL:
    Description: 'URL of the playground interface'
    Value: !Sub 'https://${Subdomain}.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-PlaygroundURL'

  PlaygroundDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref PlaygroundDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  PlaygroundBucketName:
    Description: 'S3 Bucket Name for static files'
    Value: !Ref PlaygroundBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  PlaygroundAPIEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${PlaygroundAPI}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  PlaygroundLambdaArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt PlaygroundLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
